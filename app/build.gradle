apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.lyric.android.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 132
        versionName "1.3.2"

        // dex突破65535的限制
        multiDexEnabled true

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "common"]
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            minifyEnabled false
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def isDefaultOutput = true;
            if (isDefaultOutput) {
                // 默认
            } else {
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            // 输出apk名称为AndroidUtils_v1.3.2_2017-09-01_common.apk
                            def fileName = "AndroidUtils_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }
        }
    }

    // 多渠道打包
    productFlavors {
        common {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    useLibrary 'org.apache.http.legacy'
}

def static releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':library')

    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'

    compile 'org.greenrobot:eventbus:3.1.1'

    Map<String, String> dependencies = rootProject.ext.dependencies
    testCompile dependencies.jUnit
    testCompile dependencies.mockito
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    compile dependencies.nineoldandroids
    compile dependencies.rxAndroid
    compile dependencies.gson

    debugCompile dependencies.leakcanarydebug
    releaseCompile dependencies.leakcanaryrelease
    compile dependencies.retrofit2

    compile dependencies.picasso
    compile dependencies.glide
    compile dependencies.fresco
    compile dependencies.stetho
    compile dependencies.okhttp

    compile dependencies.genius
    compile dependencies.butterKnife
}
